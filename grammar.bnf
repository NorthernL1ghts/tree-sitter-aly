; Precedence is labeled using `prec` in a comment either preceding or
; inline with a rule.
; Associativity is explicitly stated either through comments of a
; similar nature or through `.left` or `.right` following `prec`.

; CONFLICTS: [<expr-lambda>, <type-derived>], [<type>]
; Conflicts require GLR parsing.

; Top-level rule.
<file>           ::= { <expression> | ";" }

; Expression.
<expression>     ::= <expr-decl>
                   | <expr-struct-decl>
                   | <expr-if>
                   | <expr-while>
                   | <expr-for>
                   | <expr-block>
                   | <expr-lambda>
                   | <expr-call>
                   | <expr-cast>
                   | <expr-subs>
                   | <expr-paren>
                   | <expr-prefix>
                   | <expr-binary>
                   | <expr-primary>
                   | <comment>

; Declarations.

; prec 15
<expr-decl>      ::= <decl-start> <decl-rest>

<decl-start>     ::= IDENTIFIER ":"

; prec 2
<decl-rest>      ::= <type>
                   | <type-function> <expression>
                   | <type> "=" <expression> ; prec 3
                   | "ext" <type>

<expr-struct-decl> ::= IDENTIFIER ":>" "type" { <type-attributes> } "{" { <expr-decl> } "}"
<type-attributes>  ::= ALIGNAS NUMBER

; Control Flow Expressions.

; Right associative
<expr-if>        ::= "if" <expression> <expression> [ "else" <expression> ]

<expr-while>     ::= "while" <expression> <expression>
<expr-for>       ::= "for" <expression> [ "," ] <expression> [ "," ] <expression> [ "," ] <expression>

; Other expressions.
<expr-block>     ::= "{" { <expression> } "}"
<expr-lambda>    ::= <type-function> <expression>
; prec 15
<expr-call>      ::= <expression> "(" { <expression> [ "," ] } ")"
; prec 10
<expr-subs>      ::= <expression> "[" <expression> "]"
; prec 10
<expr-paren>     ::= "(" <expression> ")"
<expr-prefix>    ::= "@" <expression> ; prec.left 10000
                   | "&" <expression> ; prec.left 299
                   | "!" <expression> ; prec.left 10000
                   | "#" <expression> ; prec.left 10000
                   | "-" <expression> ; prec.left 499
                   | "~" <expression> ; prec.left 10000

<expr-binary>    ::= <expression> "." IDENTIFIER ; prec.left 1000000000
                   | <expression> "as" <type> ; prec.left 1000
                   | <expression> "*" <expression> ; prec.left 600
                   | <expression> "/" <expression> ; prec.left 600
                   | <expression> "%" <expression> ; prec.left 600
                   | <expression> "+" <expression> ; prec.left 500
                   | <expression> "-" <expression> ; prec.left 500
                   | <expression> "<<" <expression> ; prec.left 400
                   | <expression> ">>" <expression> ; prec.left 400
                   | <expression> "&" <expression> ; prec.left 300
                   | <expression> "|" <expression> ; prec.left 300
                   | <expression> "^" <expression> ; prec.left 300
                   | <expression> "<" <expression> ; prec.left 200
                   | <expression> ">" <expression> ; prec.left 200
                   | <expression> "=" <expression> ; prec.left 200
                   | <expression> "<=" <expression> ; prec.left 200
                   | <expression> ">=" <expression> ; prec.left 200
                   | <expression> "!=" <expression> ; prec.left 200
                   | <expression> "&&" <expression> ; prec.left 50
                   | <expression> "||" <expression> ; prec.left 50
                   | <expression> ":=" <expression> ; prec.left 10
                   | <expression> "::" <expression> ; prec.left 10
                   | <expression> ":>" <expression> ; prec.left 10

<expr-primary>   ::= NUMBER | IDENTIFIER ; prec 5

; Types.
<type>           ::= ( <type-base> | <type-pointer> | <type-reference> | <type-derived> | <type-arbitrary-int> )

 ; prec 1
<type-pointer>   ::= "@" <type>

 ; prec 2
<type-reference>   ::= "&" <type>

<type-base>      ::= IDENTIFIER | "integer" | "byte" | "void"
<type-derived>   ::= <type-array> | <type-function>
<type-array>     ::= <type> "[" [ <expression> ] "]"
<type-arbitrary-int> ::= ( "i" | "s" | "u" ) NUMBER

 ; prec 10
<type-function>       ::= <type> "(" { <param-decl>  } ")" { <function-attributes> }
<function-attributes> ::= NOMANGLE | DISCARDABLE

<param-decl>     ::= <decl-start> <type> [ "," ]

; Miscellaneous.
; COMMENT        ::= /;+.*/
; IDENTIFIER     ::= /[a-zA-Z]+[a-zA-Z0-9_]*/
; NUMBER         ::= /[0-9]+/
; keywords: if else while ext struct type
